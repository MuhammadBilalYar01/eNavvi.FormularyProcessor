// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;
using eNavvi.FormularyProcessor.Entities;

namespace eNavvi.FormularyProcessor.Data
{
    public partial class eNavviContext : DbContext
    {
        public eNavviContext()
        {
        }

        public eNavviContext(DbContextOptions<eNavviContext> options)
            : base(options)
        {
        }

        public virtual DbSet<DrugDetails> DrugDetails { get; set; }
        public virtual DbSet<DrugTier> DrugTier { get; set; }
        public virtual DbSet<Drugs> Drugs { get; set; }
        public virtual DbSet<Plan> Plan { get; set; }
        public virtual DbSet<RelatedInfo> RelatedInfo { get; set; }
        public virtual DbSet<ValidationResult> ValidationResult { get; set; }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<DrugDetails>(entity =>
            {
                entity.HasIndex(e => e.TierId, "FK_IDX_DrugDetails_TierID_DrugTier_ID");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.ExtraInfo).IsUnicode(false);

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Ndc).HasColumnName("NDC");

                entity.Property(e => e.PublishDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2000-01-01 00:00:00.000')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TierId).HasColumnName("TierID");

                entity.HasOne(d => d.Drug)
                    .WithMany(p => p.DrugDetails)
                    .HasForeignKey(d => d.DrugId)
                    .OnDelete(DeleteBehavior.Cascade)
                    .HasConstraintName("FK_Drugs_In_DrugDetails");

                entity.HasOne(d => d.Tier)
                    .WithMany(p => p.DrugDetails)
                    .HasForeignKey(d => d.TierId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DrugDetails_TierID_DrugTier_ID");
            });

            modelBuilder.Entity<DrugTier>(entity =>
            {
                entity.HasIndex(e => e.PlanId, "FK_IDX_DrugDetailHistory_PlanID_Plan_ID");

                entity.HasIndex(e => e.PlanId, "FK_IDX_DrugTier_PlanID_Plan_ID");

                entity.HasIndex(e => e.TierName, "idx_DrugTier_TierName");

                entity.HasIndex(e => new { e.TierName, e.PlanId }, "uq_DrugTier_TierNameAndPlanId")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PlanId).HasColumnName("PlanID");

                entity.Property(e => e.PublishDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2000-01-01 00:00:00.000')");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.TierName)
                    .IsRequired()
                    .HasMaxLength(100)
                    .IsUnicode(false);

                entity.HasOne(d => d.Plan)
                    .WithMany(p => p.DrugTier)
                    .HasForeignKey(d => d.PlanId)
                    .OnDelete(DeleteBehavior.ClientSetNull)
                    .HasConstraintName("FK_DrugTier_PlanID_Plan_ID");
            });

            modelBuilder.Entity<Drugs>(entity =>
            {
                entity.HasIndex(e => e.Rxcui, "idx_rxcui_drugs");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.DrugName)
                    .IsRequired()
                    .HasMaxLength(6000)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<Plan>(entity =>
            {
                entity.HasIndex(e => e.PlanGuid, "IDX_Plan_PlanGuid")
                    .IsUnique();

                entity.HasIndex(e => e.Name, "UQ_Plan_Name")
                    .IsUnique();

                entity.HasIndex(e => e.StateId, "nci_wi_Plan_012781746C563862B5AD557183BFAAB2");

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Country)
                    .IsRequired()
                    .HasMaxLength(50)
                    .IsUnicode(false);

                entity.Property(e => e.County).IsUnicode(false);

                entity.Property(e => e.Employer)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.Name)
                    .IsRequired()
                    .HasMaxLength(300)
                    .IsUnicode(false);

                entity.Property(e => e.PlanGuid)
                    .IsRequired()
                    .HasMaxLength(36)
                    .IsUnicode(false)
                    .HasDefaultValueSql("(newid())")
                    .IsFixedLength();

                entity.Property(e => e.PublishDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("('2000-01-01 00:00:00.000')");

                entity.Property(e => e.StateId).HasDefaultValueSql("((52))");

                entity.Property(e => e.Status)
                    .IsRequired()
                    .HasDefaultValueSql("((1))");

                entity.Property(e => e.Url)
                    .HasMaxLength(200)
                    .IsUnicode(false);
            });

            modelBuilder.Entity<RelatedInfo>(entity =>
            {
                entity.HasIndex(e => e.Rxcui, "IDX_RelatedInfo");

                entity.HasIndex(e => e.Rxcui, "uq_index")
                    .IsUnique();

                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.BrandName)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DosageFromGroup)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.DrugClasses)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.Ingredients)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.InitialFilterDfgs).IsUnicode(false);

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");
            });

            modelBuilder.Entity<ValidationResult>(entity =>
            {
                entity.Property(e => e.Id).HasColumnName("ID");

                entity.Property(e => e.Comments).IsUnicode(false);

                entity.Property(e => e.DrugName)
                    .IsRequired()
                    .IsUnicode(false);

                entity.Property(e => e.LastUpdatedDate)
                    .HasColumnType("datetime")
                    .HasDefaultValueSql("(getdate())");

                entity.Property(e => e.PlanId).HasColumnName("PlanID");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}